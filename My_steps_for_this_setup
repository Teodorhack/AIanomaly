Creating a Docker environment on WSL to transport and run requirements on any machine

// Update the package list:
$ sudo apt update

// Install Docker:
$ sudo apt install docker.io

// Enable and run Docker:
$ sudo systemctl enable --now docker

// Add the current user to the Docker group to avoid using sudo:
$ sudo usermod -aG docker $USER

// Check if Docker is installed correctly:
$ docker --version

// Allow Docker to run without sudo:
$ sudo usermod -aG docker $USER

Creating a Docker environment for Jupyter Notebook

// Create a project directory:
$ mkdir jupyter-docker
$ cd jupyter-docker

// Create a Dockerfile in the current directory:

This contains instructions for building the Docker image

FROM python:3.9

WORKDIR /workspace

// Install Jupyter and the required libraries:
RUN pip install --no-cache-dir jupyter pandas numpy matplotlib

// Expose port 8888 for Jupyter:
EXPOSE 8888

// Launch Jupyter Notebook when the container starts:
CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]

Building and running the Docker image

// Build the Docker image:
$ docker build -t <your-dockerhub-username>/jupyter-notebook .

// Run the container:
$ docker run -p 8888:8888 jupyter-notebook

// Access Jupyter Notebook in the browser at:
http://localhost:8888

Uploading the Docker image to Docker Hub

// Log in to Docker Hub:
$ docker login

// Tag the Docker image:
$ docker tag jupyter-notebook <your-dockerhub-username>/jupyter-notebook:latest

// Push the Docker image to Docker Hub:
$ docker push <your-dockerhub-username>/jupyter-notebook:latest

How to share the notebook and development environment with others

// Modify the Dockerfile to copy files from Windows into WSL:
COPY KDDTest.txt /workspace/
COPY KDDTrain.txt /workspace/

// Access the Jupyter Notebook after running the container:
http://localhost:8888

Running the Docker environment on Raspberry Pi

// On Raspberry Pi, install Docker and run the container:
$ docker pull <your-dockerhub-username>/jupyter-notebook:latest
$ docker run -p 8888:8888 <your-dockerhub-username>/jupyter-notebook:latest

// Access the Jupyter Notebook on Raspberry Pi at:
http://<raspberry-pi-ip>:8888

Modifying the Docker image after adding new libraries

// Add the new libraries to the Dockerfile:
RUN pip install --no-cache-dir
seaborn
matplotlib
numpy

// Rebuild the Docker image:
$ docker build -t <your-dockerhub-username>/jupyter-notebook:latest .

// Push the image to Docker Hub:
$ docker push <your-dockerhub-username>/jupyter-notebook:latest

Creating a virtual environment on Debian (optional, extra)

// Create a virtual environment:
$ python3 -m venv environment_name

// Activate the virtual environment:
$ source myenv/bin/activate

// Install Jupyter in the virtual environment:
$ pip install jupyter

// Start the Jupyter Notebook:
$ jupyter notebook
